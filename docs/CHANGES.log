2025-05-22: LLM admin UI refactor â€” All LLM dashboard and sub-pages now use base.html for consistent header/footer. Dashboard cards are clickable links to sub-pages. Updated docs/llm/README.md.

2025-05-22: Added unified icon-based navigation bar to all /llm admin pages for consistent, accessible navigation. Navigation is visible at the top of all LLM admin and image tool pages, styled per dark theme and workflow nav conventions.

2025-05-24: Began migration to direct SQL (psycopg2) for all LLM modular prompt features. Deprecated ORM models in app/models.py and removed SQLAlchemy imports from app/__init__.py. Marked app/llm/services.py, app/llm/routes.py, and app/api/llm.py for direct SQL refactor.

2025-05-23: Removed all remaining SQLAlchemy/ORM imports and usage from the codebase, including scripts, config, and API routes. Fully migrated to direct SQL (psycopg2) for all database access as part of the LLM modular prompt refactor. Cleaned up dependencies and configuration. [LLM Modular Prompt Refactor]

2025-05-24: Fixed critical /db route registration issue. Canonicalized db Blueprint definition by moving Blueprint creation and all route attachments to app/database/routes.py, and registering the Blueprint directly from there in the app factory. This robust pattern ensures all /db endpoints are always available and eliminates circular import issues. Verified with print_routes.py and curl. [Database Admin Robustness]

2025-05-24: Refactored /api/v1/llm/actions and /actions/<id> endpoints to use robust direct SQL (psycopg2) with parameterized queries and error handling. Registered llm_api Blueprint in the app factory to ensure all LLM API endpoints are available. Verified endpoint registration and correct JSON output with curl and print_routes.py. Updated modular prompt refactor plan. [LLM Modular Prompt Refactor]

2025-05-24: Refactored /api/v1/llm/actions/<id>/prompt_parts and linking endpoints to use robust direct SQL (psycopg2) with correct array handling for tags. Fully tested linking and unlinking prompt parts to actions. Updated modular prompt refactor plan. [LLM Modular Prompt Refactor]

2025-05-24: Refactored /api/v1/llm/actions/<id>/execute endpoint to use robust direct SQL (psycopg2), removed all ORM usage, and stubbed LLM call to return a dummy response for testing. Endpoint is now robust and testable without external dependencies. Updated modular prompt refactor plan. [LLM Modular Prompt Refactor]

2025-05-24: LLM Model/Provider Refactor & UI
- Refactored all LLM model and provider endpoints to use static Ollama-only data (no ORM, no DB dependency).
- Removed all SQLAlchemy/ORM usage from LLM provider/model endpoints.
- Fixed Edit Action modal on /llm/actions by making /api/v1/llm/providers and /api/v1/llm/models return static JSON.
- Added /llm/models UI page, linked in LLM nav, to display available models from API.
- Updated /llm/_llm_nav.html to include Models link and highlight active state.
- All endpoints and UI now robust, API-first, and ready for further modular prompt work.

2025-05-25: Completed removal of all SQLAlchemy/ORM usage and migrated all LLM modular prompt features to direct SQL (psycopg2). Updated all API endpoints and service logic. UI for Action Details and modular prompt part management is now being wired up and tested. Updated docs and migration plan. [LLM Modular Prompt Refactor]

2025-05-25: LLM Modular Prompt Part Migration & UI Complete
- All LLM modular prompt part management (backend and UI) is now direct SQL (psycopg2), ORM-free, and robust.
- Action Details UI fully supports modular prompt part CRUD, linking, unlinking, reordering, and test execution.
- All endpoints tested with curl and browser; no ORM code remains.
- Updated docs/llm/README.md and docs/temp/llm_modular_prompt_refactor_plan.md to reflect completion.
[LLM Modular Prompt Refactor]

2025-05-25: LLM Actions dropdown on /workflow/idea now fetches and displays all available actions from the backend.
- Removed green JSON debug text from /llm/actions page.
- Fixed modal CSS and Action creation bugs in previous steps.
- /api/v1/llm/prompts endpoint now uses direct SQL, restoring prompt template selection.
- All changes follow project engineering rules (no ORM, no destructive migration, direct SQL only).

2025-05-25: /llm/prompts Prompt Parts tab is now default and includes a persistent radio filter for Type (All, system, user, assistant) above the list. Filtering is client-side and persists across tab switches.

2025-05-25: BUGFIX: Prompt Part 'Name' field is now correctly saved to the llm_prompt_part table via the API (POST/PUT). Previously, the name was not persisted due to missing SQL fields.

2025-05-26: BUGFIX: /db/backup now works by running pg_dump as the DB owner (nickfiddes), resolving permission errors and 500s in the UI. Backup Now button is functional again.

2025-05-26: RESTORED: Step-by-step Action creation wizard modal, with full instructions and navigation, is now back on /llm/actions. Users are guided through each stage of Action creation with contextual help and prompt part management.

- feat(nav): Added Workflow and Modules dropdowns to main header nav, plus a Docs link. Fixed Images link to /llm/images. All links tested via curl.
- fix(nav): Workflow and Modules dropdowns now open on hover, focus, or click, and close on outside click or Escape. Fully keyboard accessible and accessible for screen readers.
- fix(nav): Dropdowns now reliably activate on click, focus, and keyboard. JS toggles hidden/block classes for accessibility and compatibility.
- feat(llm): llm_prompt_part tags are now validated to only allow 'role', 'operation', 'format', 'specimen'. All existing rows set to ['role'].
- feat(llm): Prompt Parts tag filter selection is now persistent in localStorage and restored on page load for improved UX.
- feat(llm): Edit icon in Prompt Templates tab now switches to Assembler tab and loads the template for editing.
- feat(workflow): Workflow now persists active post selection across all stages using localStorage. Workflow nav links always include post_id. Post stays activated until another is selected.
- feat(workflow): Unified post header (title, created, updated) now appears above the heading on every workflow stage via shared macro. Editing the macro updates all stages.
- fix(workflow): All workflow stages now receive and render the post header. Backend passes post object to every stage template. Header is now visible on every workflow section.
- fix(workflow): Post header now always appears above workflow nav icons for consistent UX across all workflow stages.
- fix(workflow): Standardized post header spacing with consistent margin above and below via macro. Removed extra margin from workflow templates for uniform appearance across all stages. 
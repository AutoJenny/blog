# Changes Log

All notable changes to this project are documented in this file.

## [Unreleased]

### Added
- LLM integration with improved interface and functionality
  - Added Test button to LLM Action modal in blog develop interface
  - Added '+ Add New Prompt' link in LLM settings panel
  - Added /api/v1/llm/prompts POST endpoint for creating new LLMPrompt records
  - Added comprehensive API documentation for workflow endpoints
  - Added docs/workflow/field_reference.md for workflow sub-stage fields
- Database management interface improvements
  - Enhanced virtual environment handling in run_server.sh
  - Added automatic venv detection and activation
- Major UI redesign of blog index page
  - Replaced table with modern, responsive card/grid layout
  - Added floating 'New Post' button
  - Added modern toggle for showing deleted posts
  - Improved accessibility and mobile responsiveness
  - Refined dark theme with improved contrast
  - Added json, edit, and delete icons/links to each post row
- Added new LLM API endpoints:
  - GET /api/v1/llm/templates for prompt templates
  - GET /api/v1/llm/config for LLM configuration
  - GET /api/v1/llm/prompts for prompt management
  - Enhanced /api/v1/llm/models/ollama endpoint
- Add: New LLM landing page at /llm/ with links to LLM Config, Actions, Templates, and Images.
- Add: New LLM Images sub-page at /llm/images for image workflow management (placeholder).
- Add: Main header menu link to /llm/config for easy access to LLM configuration.

### Changed
- Updated all workflow documentation for asynchronous model
- Moved New Post button to main header
- Enhanced LLM interface JavaScript functionality
- Improved LLMService timeout handling and error reporting
- Increased LLM backend request timeout to 60 seconds
- Reorganized Idea Scope and Provisional Title fields with independent LLM modals
- Updated DEPENDENCIES.md with current project dependencies
- Standardized all LLM API endpoints to use /api/v1/llm/ prefix
  - Updated routes in app/llm/routes.py
  - Updated documentation in docs/api/llm_endpoints.md
  - Updated test cases in tests/test_llm.py
- Change: Removed LLM Config from the main menu; LLMs now links to a new landing page with a tabbed sub-header for Templates, Images, and Config. All LLM sub-pages now have consistent tabbed navigation.

### Fixed
- Fixed incorrect route registration for /blog/develop/<post_id>
- Fixed all fetch URLs in blog development template
- Fixed Post.updated_at updates for PostDevelopment fields
- Fixed LLM Test Interface model selection and display
- Fixed Idea Scope modal prompt template saving
- Fixed template dropdown population in LLM settings panels
- Fixed Generate button functionality in LLM settings panels
- Fixed blueprint registration issues
- Fixed template rendering problems
- Improved error handling in LLMService
- Fixed prompt template loading in LLM Actions builder
- Fixed LLM model selection in builder interface
- Fixed prompt template management endpoints
- Improved LLM configuration handling with default values
- Fixed prompt template and model loading in LLM Actions builder
- Standardized API endpoints across LLM management interfaces
- Improved model loading state display in builder interface
- Fixed LLM model selection persistence in configuration
- Added automatic configuration saving when model is selected
- Improved model selection state management across pages
- Fixed LLM model dropdown population in Actions builder page
- Synchronized model selection between LLM management and Actions builder
- Added current model selection state to model dropdowns
- Fixed action builder form submission in LLM Actions page
- Corrected field mapping between form and API endpoint
- Added proper error handling and success feedback for action creation
- Fixed action creation in LLM Actions builder
- Added proper validation for required fields in action creation
- Improved error handling and logging for action creation
- Added default values for temperature and max_tokens
- Fixed route path for action creation in LLM Actions builder
- Updated JavaScript to use correct endpoint path
- Improved route registration to avoid prefix duplication
- Reorganized LLM routes to avoid conflicts between blueprints
- Moved action creation endpoint to API blueprint
- Fixed endpoint paths in JavaScript code
- Improved route organization and documentation
- Cleaned up route organization to separate UI and API routes
- Removed duplicate route definitions
- Fixed route conflicts between blueprints
- Improved code organization and maintainability
- Fix: Updated all fetch URLs in develop.html to use the /blog/api/v1/posts/... prefix to match the Flask route registration and resolve 404 errors when saving global and section fields.
- Fix: Section LLM Action dropdowns and Generate buttons are now always populated and wired up after DOM is ready, ensuring Actions are available for all section content fields in the develop page.
- Fix: Replaced all inline Jinja2 postId usage in JavaScript in develop2.html with the robust data attribute approach, using document.getElementById('stage-accordion').dataset.postId. This prevents Jinja2 syntax errors and ensures consistent postId access.
- Fix: Purged all Python cache files, confirmed only one develop.html exists, added a telltale comment to the template, and verified the correct template is now loaded and the /api/v1/llm/actions/3/execute endpoint works without error.

### Removed
- Removed PromptTemplate model and table
- Removed legacy references to sequential workflow initialization
- [REMOVED] All test Postgres and test database configuration, scripts, and test infrastructure have been deleted. Backup and restore functionality is retained. This is a belt-and-braces removal; test infrastructure can be rebuilt later if needed.

## [0.1.0] - 2024-03-01

### Added
- Initial project setup
- Basic blog functionality
- User authentication system
- API endpoints for core features
- Database models and migrations
- Frontend templates and styling
- Development environment configuration
- Testing framework implementation
- Documentation structure

2024-03-21
- Updated development interface to properly sync template selection with textarea
- Enhanced stages documentation to include references to development interface and LLM assistance
- Added LLM assistance details to Development Stage documentation
- Updated API documentation for LLM actions endpoint
  - Added detailed request/response formats for template management
  - Added documentation for GET template settings endpoint
  - Updated error response format documentation
  - Added template_name field for new template creation

2024-03-26
- Updated documentation for template management functionality
  - Added template management section to DEVELOPMENT.md
  - Updated LLM architecture documentation with template persistence details
  - Enhanced documentation of settings persistence and synchronization
- Updated LLM API documentation to include new template settings persistence endpoint
- Added documentation for automatic template settings persistence in UI
- Updated LLM Action Test Feature documentation to reflect current functionality

2024-03-27
- Updated API documentation for LLM endpoints
  - Added template management endpoints documentation
  - Added documentation for /api/v1/llm/actions/ endpoint
  - Added documentation for /api/v1/llm/test endpoint
  - Enhanced error response documentation with timeout details
- Standardized API route prefixes to consistently use /api/v1/llm/
- Updated frontend fetch calls in develop.html to use consistent API paths
- Updated backend routes in llm.py to use proper URL prefix
- Fixed route path mismatches between frontend and backend

2024-03-28
- Fixed template persistence in LLM modals
  - Updated element IDs to use consistent field name suffixes
  - Fixed template selection and persistence for provisional_title field
  - Synchronized template dropdown with textarea across all fields
  - Ensured proper saving of LLM settings for all fields

2024-03-29
- Fixed prompt template text persistence
  - Fixed prompt template saving and loading in both idea_scope and provisional_title modals
  - Ensured both dropdown and textarea are properly synchronized
  - Fixed element ID references in JavaScript code
  - Added proper error handling for template loading

[2024-03-XX]
- Enhanced template management system:
  - Added automatic synchronization between template dropdown and textarea
  - Improved template settings persistence
  - Added real-time saving of LLM settings
  - Enhanced error handling and user feedback
  - Updated development documentation to reflect changes

2025-04-30
- Enhanced LLM Actions system:
  - Added source field selection from workflow fields
  - Added prompt template selection from existing templates
  - Added LLM model selection with status indicators
  - Added test functionality with input/output preview
  - Updated database models for better action tracking
  - Improved error handling and logging
  - Added execution history with status tracking

2025-05-01 - LLM Actions UI Improvements
- Redesigned LLM Actions page with improved styling and contrast
- Added clear action cards with detailed information display
- Improved tab navigation with better visual feedback
- Enhanced form styling with better input contrast and labels
- Removed URL parameters from action creation
- Fixed action display in the Actions tab
- Improved modal styling and form organization
- Added proper field name display in action cards
- Standardized button styles and layout
- Added consistent dark theme styling across all components

2025-05-01 - LLM Action Routing Fix
- Fixed duplicate route definitions between llm and api blueprints
- Consolidated all API routes into app/api/llm.py
- Moved UI routes to app/llm/routes.py
- Updated frontend code to use correct API endpoints
- Fixed issue with LLM action creation not working due to route conflicts

2025-05-01 - LLM Actions Additional Improvements
- Added delete functionality for LLM actions
- Fixed prompt template text wrapping in action cards
- Updated edit functionality to load actions into Builder tab
- Improved action update/create form handling
- Added confirmation dialog for action deletion
- Enhanced error handling for action operations

2025-05-01 - LLM Actions Test Tab Improvements
- Fixed Test tab functionality
- Added proper test execution with loading states
- Added error handling for test runs
- Improved test output display with proper wrapping
- Added action details to test selection dropdown
- Enhanced user feedback during test execution

[2024-03-21] LLM Actions Test Functionality
- Added missing /api/v1/llm/test endpoint for testing LLM actions
- Implemented execute_llm_request function in services.py
- Fixed "No output generated" issue by adding proper error handling and logging
- Added detailed request/response logging for better debugging
- Improved error messages in the UI for better user feedback

[2024-03-21] Enhanced LLM Error Handling
- Added comprehensive error handling in LLM services
- Added model availability validation before test execution
- Improved error messages with specific failure reasons
- Added detailed logging throughout LLM request lifecycle
- Added timeout handling with appropriate error responses
- Added validation for required fields with specific error messages
- Added response format validation for Ollama service
- Enhanced logging for request/response debugging

[2024-03-21] Fixed Ollama Response Format Handling
- Updated LLM service to handle multiple Ollama response formats
- Added support for responses with model_used field
- Improved response format validation and error handling
- Fixed "No output generated" error in test functionality

[2024-03-21] Standardized LLM Response Format
- Updated frontend to handle multiple response formats
- Standardized backend response format for consistency
- Added model information to test responses
- Improved error handling for unexpected formats
- Fixed frontend display of test results

[2024-03-21] Fixed LLM Test Input and Response Handling
- Fixed prompt template formatting to properly incorporate test input
- Moved prompt formatting to frontend for better transparency
- Updated response handling to support all Ollama response formats
- Fixed "No output generated" error by improving response parsing
- Added support for direct string responses
- Improved error messages for better debugging

[2025-05-01]
- Fixed LLM test functionality:
  - Added proper prompt template with {{input}} placeholder
  - Added validation to ensure templates have required placeholder
  - Added comprehensive logging throughout request lifecycle
  - Fixed prompt + input combination logic
  - Added better error messages for template issues

[2025-05-01]
- Split LLM interface into separate pages:
  - Created dedicated configuration page (config.html)
  - Created dedicated prompt templates page (templates.html)
  - Created dedicated test interface (test.html)
  - Added consistent navigation between pages
  - Improved UI/UX with better feedback and error handling
  - Added live preview of prompt + input combination

[2024-03-21]
- Improved LLM templates page styling:
  - Added consistent admin styling system integration
  - Enhanced button styles with proper hover states and visual hierarchy
  - Improved modal design with better spacing and transitions
  - Updated form elements for better usability
  - Added proper color variables usage from admin theme
  - Enhanced template cards with better shadows and animations
  - Improved navigation tabs styling

[2024-03-21]
- Fixed LLM template editing functionality:
  - Added missing GET endpoint for retrieving single prompt by ID
  - Fixed route path for fetching prompt details
  - Improved error handling for prompt editing

[2024-03-21]
- Enhanced LLM prompt template editor:
  - Improved field selector with stage-based grouping
  - Added drag & drop functionality for field insertion
  - Enhanced visual feedback for drag & drop interactions
  - Added placeholder text and help messages
  - Improved template editor styling and usability
  - Fixed field insertion at cursor position

[2024-03-21]
- Fixed route name mismatches across LLM templates:
  - Updated 'llm.templates_page' to 'llm.templates' in all template files
  - Fixed navigation links in config.html, templates.html, and test.html
  - Ensured consistent route naming across the LLM management interface

[2024-03-21]
- Fixed JavaScript template literal syntax in templates.html:
  - Fixed conflict between JavaScript template literals and Jinja2 syntax
  - Updated field insertion code to use string concatenation
  - Fixed 500 error in templates route

[2024-03-21]
- Improved LLM template field selector:
  - Replaced long field list with two-level dropdown system
  - Added stage selection dropdown to filter fields
  - Added dynamic field tag creation for selected fields
  - Fixed field insertion syntax in template editor
  - Enhanced drag and drop interaction with better visual feedback
  - Improved field tag styling and usability

[2025-05-01]
- Fixed issue where test suite was accidentally dropping production database
- Created separate test database (blog_test) to prevent test suite from affecting production data

[2025-05-01]
- Standardized styling across LLM management interface:
  - Updated navigation tabs with consistent styling and hover effects
  - Unified card and section styling with consistent shadows and animations
  - Standardized form elements and button styles
  - Improved visual hierarchy and spacing
  - Enhanced dark theme consistency

[2025-05-01]
- Improved button styling in LLM interface:
  - Added proper primary button styling for main actions
  - Standardized action button appearance across all pages
  - Enhanced visual hierarchy for primary actions

[2025-05-01]
- Fixed field placeholder insertion in template editor:
  - Resolved string concatenation issues with Jinja2 template
  - Improved JavaScript handling of template placeholders
  - Fixed field text insertion at cursor position
  - Added proper handling of curly braces in JavaScript

[2025-05-01]
- Fixed template modal functionality:
  - Fixed New Template and Edit Template buttons
  - Added proper modal open/close handling
  - Improved form reset and field clearing
  - Added modal close on outside click
  - Fixed body scroll lock when modal is open
  - Enhanced error handling for template operations

[2025-05-01]
- Fixed template button functionality:
  - Replaced onclick attributes with proper event listeners
  - Added data-id attributes for template actions
  - Improved button event handling
  - Fixed modal open/close functionality
  - Enhanced error handling for template operations

[2025-05-01]
- Fixed JavaScript syntax error in templates page:
  - Fixed unexpected EOF error
  - Reorganized function definitions
  - Added proper error handling
  - Added debug logging
  - Improved code structure and organization

2024-05-02: Fixed TypeError in /llm/templates New Template button (showNewTemplateModal) by adding null and classList check before accessing classList.contains on selectedFields.firstChild.

2024-05-02: Removed 'Source Field' and all test functionality from /llm/actions page, including UI, form fields, tabs, and related JavaScript logic. Actions now only define field name, prompt template, model, temperature, and max tokens.

2024-05-02: Fix New Action modal to populate LLM model and prompt template selects using availableModels and availablePrompts, matching builder tab.

2024-05-02: Unify modal and builder form field names/IDs for LLM Action creation, and update modal JS to match builder logic. Fixes 'Unknown error' on Action save.

2024-05-02: Improve action form submission logic to prevent false error alerts, disable submit button, log result, and reload only after success. Fixes misleading 'Unknown error' alert.

2024-05-02: Prevent error alert after successful action save by reloading and returning immediately. Fixes race condition in both builder and modal forms.

2024-05-02: Remove duplicate modal form event handlers before adding a new one, using a named handler. Prevents false error alerts after successful save.

- FIX: Standardized all /api/v1/llm/actions and /api/v1/llm/actions/<id> endpoints to return {status: 'success', action: ...} or {status: 'error', error: ...} for all GET, PUT, and DELETE requests. This resolves frontend error dialog issues due to inconsistent API responses.

- ENHANCEMENT: Added prompt_template_id to LLMAction model and API responses. The edit form for LLM Actions now pre-selects the correct prompt template when editing an action.

- FIX: Removed all debug alert and console messages from LLM Actions page scripts. Improved editAction logic to ensure dropdowns are reliably pre-loaded with the correct values when editing an action.

- FIX: Edit Action form now always pre-loads dropdowns with the correct values by awaiting data initialization before setting form values.

- Fix: LLM Actions Edit now pre-populates fields correctly (uses data.action.<field>).
- Fix: New Action modal now starts with blank/placeholder selects for model and prompt template, so nothing is pre-selected by default.

- Fix: Corrected TemplateSyntaxError in app/templates/blog/develop.html by adding missing closing brace to the Jinja expression for postId in the LLM action button scripts for 'idea_scope' and 'provisional_title'.

2024-07-09: Fix LLMAction prompt template field substitution. Prompt templates now support {{field}} for any PostDevelopment field (e.g., {{basic_idea}}), not just {input}. Backend fetches all fields for the post and substitutes them using Jinja2. This enables LLM actions to work as expected for all referenced fields in prompts.

2024-07-09: Add robust logging for Jinja2 template errors in LLMAction.process_template. Now logs the template string and fields dict to help debug template rendering issues.

2024-07-09: Add debug endpoint /api/v1/llm/actions/debug/list_templates to list all LLMAction prompt templates for troubleshooting template errors.

- Fix: Resolved TemplateSyntaxError in app/templates/llm/templates.html caused by Jinja2 parsing a JavaScript template literal (`{{ ${draggedField} }}`) in the template editor. Wrapped the line in `{% raw %}...{% endraw %}` to prevent Jinja2 from interpreting it.

- Fix: Drag&drop field insertion in app/templates/llm/templates.html now inserts {{field_name}} (no spaces, no hidden chars). Removed hidden characters that caused backend template errors.

- Add: Implemented /api/v1/posts/<post_id>/fields/<field> endpoint to allow saving individual PostDevelopment fields from the develop page. This fixes saving for global fields like Idea Scope.

- Refactor: Switched postId passing in develop.html to use a data attribute on the main container, and updated all JS to read postId from the DOM instead of inline Jinja2. This prevents template syntax errors and is more robust.

- Enhancement: Added LLM Action selector and Generate button to every field (except sections) on the develop page, and ensured the Generate button saves the field after generation. This makes LLM generation available for all fields and ensures saving works.

- Enhancement: Replaced the Section Order textarea in the Outlining Stage with a Grab Headings button, draggable list, and Save button. This allows users to visually reorder section headings and save the new order as JSON.

- Added DELETE endpoint /api/v1/section/<int:section_id> to allow deleting sections from the Authoring stage in the post development interface.

- UI/UX: Improved section accordions in the Authoring stage. Added chevron icon, highlight for open section, hover effect, and animated open/close for better usability.

- Enhancement: 'Ideas to include' and 'Facts to include' fields in each section are now persisted in the database and auto-saved in the UI, with values pre-populated from the backend.

- Added endpoint: PUT /api/v1/posts/<post_id>/sections/<section_id>/fields/<field> to allow saving individual section fields (including new ones) from the UI.

- Refactor: Deprecated app/services/llm.py and consolidated all LLM service logic into app/llm/services.py. Updated all imports and usages. See docs/llm_service_refactor.md for details.

- Enhancement: The Idea Scope LLM Generate button now auto-saves the generated content to the backend, ensuring the UI and db are updated immediately after generation.

2025-05-05 Fix: Removed unwanted special character from draggable field template string in llm/templates.html. Field insertion now correctly uses {{field_name}} syntax without extra characters.

2025-05-05 Added 'ideas_to_include', 'facts_to_include', and 'section_heading' to the Authoring Stage in WORKFLOW_FIELDS (app/blog/fields.py) so they are available for prompt templates and saving in the UI.

2025-05-05 Enhancement: Added LLM action selectors beside each Generate button for section fields in the Authoring stage in develop.html, and updated JS to use the selected action for section content generation.

2025-05-05 Fix: Section LLM action selectors now populate reliably—JS populates all selectors after DOM is ready, before attaching click handlers, ensuring menus are filled as soon as the page loads.

- Enhancement: Automatic database backup now runs after every commit (insert, update, or delete), with old backups rotated to prevent bloat. This uses a SQLAlchemy event listener and the existing backup script.

- UI: Section Generate buttons now show 'Generating...' and are disabled while the request is in progress, preventing double-clicks and giving clear feedback to the user.

- Enhancement: Added drag-and-drop reordering for prompt templates with visible gap indicator. Order is now persisted in the database and respected in all selection menus. Added /api/v1/llm/prompts/order endpoint to update order.

- Fix: LLM prompt templates and selection menus now always reflect the persisted order by ordering on the 'order' field in all UI routes.

- Refactored LLM Actions page (`/llm/actions`) to use accordion and drag-and-drop UI, matching the prompt templates page.
    - Each action is now a draggable accordion item with only the title and Edit button visible by default.
    - Clicking the header expands to show action details.
    - Drag-and-drop reordering is enabled and persists order via the API.

- Add: Implemented /api/v1/llm/actions/order endpoint and added 'order' field to LLMAction model to support drag-and-drop ordering of actions in the admin UI.
- Fix: Migration now sets all NULL values in llm_prompt.order to 0 before making the column NOT NULL, preventing migration errors.

- Fix: The LLM Actions page modal is now a true overlay, never rendered inline. The modal is hidden by default and only shown when triggered. All legacy builder form and tab logic is removed. The modal is now the only way to add/edit actions, and overlays the page properly.

- Change: The New Action form is now hidden by default and only appears above the list when the New Action button is clicked. Editing an action also shows the form. A Cancel button hides the form. All modal and always-visible logic is removed.

- Enhancement: The /api/v1/llm/actions/<id>/execute endpoint now merges section_fields from the request into the template context, allowing LLM prompt templates to use section-specific variables like {{section_heading}}, {{ideas_to_include}}, etc. This enables section actions (e.g., Write Section first draft) to access all relevant per-section data.

- Debug patch: Added a visible log area and debug output to the Generate All Sections button handler in app/templates/blog/develop.html. This includes:
  - A log area above the button to show progress and errors.
  - Console log and alert at the start of the click handler to confirm it is firing.
  - Error handling for fetch failures and network errors.
  - Improved feedback for each section's generation attempt.

- Made Content, Images, and Meta areas within each Section of the Authoring Stage in develop.html visually distinct and collapsible:
  - Added unique background colors and borders for each inner panel.
  - Added chevrons to each inner-accordion-header.
  - Implemented JavaScript to toggle inner-accordion-content and ensure only one is open at a time per section.

- Refactor: Broke up the Authoring Stage (Sections) in develop.html into three separate stages: 'Sections - Authoring', 'Sections - Images', and 'Sections - Meta', each with its own accordion panel and relevant fields.

[YYYY-MM-DD] Added CRUD API endpoints for ImageStyle (list, get, create, update, delete) in app/api/routes.py under /api/v1/images/styles and /api/v1/images/styles/<id>.

[YYYY-MM-DD] UI: Image style dropdown in images_prompts.html is now dynamic, fetching from the API, and supports adding new styles via modal dialog. Edit/delete coming next.

[YYYY-MM-DD] UI: Edit and delete functionality for image styles is now available in the image prompt creation UI (images_prompts.html). Users can edit or delete styles directly from the dropdown.

[YYYY-MM-DD] Enhancement: ImageStyle.description column changed from String(255) to Text (unlimited length). Migration applied.

[YYYY-MM-DD] Add: ImageFormat model and CRUD API endpoints for format management (description limited to 255 chars), mirroring ImageStyle functionality.

- Debug: Added robust debug logging to the /api/v1/llm/actions/<id>/execute endpoint in app/api/llm.py. This logs all incoming data, constructed fields, and full stack traces for any errors, to surface the root cause of persistent 500 errors during LLM Action execution.

- Enhancement: Added a full CRUD Format menu to the LLM Images Prompts page, mirroring the Styles menu. Users can now add, edit, and delete image formats via a dropdown, modal, and API integration with /api/v1/images/formats.

2025-05-07: Added ImageSetting UI to /llm/images/prompts. New menu above Style/Format allows selecting, creating, editing, and deleting ImageSettings (name, style, format). Selecting an ImageSetting auto-selects the corresponding Style and Format. Includes modal for add/edit and full JS integration.

[UI] Move ImageSetting menu above Style/Format in images_prompts.html so it appears as the first field in the form.

2025-05-07: Add /api/v1/comfyui/status and /api/v1/comfyui/start endpoints to allow the UI to check if ComfyUI is running and start it if needed (for hybrid integration).

2025-05-07: Add /api/v1/images/generate endpoint for prompt-to-image generation using ComfyUI and SD1.5, with output image copying for UI display in the hybrid UI.

2025-05-07: Major navigation and tab refactor. Added 'Images' as a top-level menu item in the main header. Refactored all /llm/images/* pages to use consistent, modern-styled tabs for section and sub-section navigation (Image Configs, Image Prompts, Image Previews; Simple/Advanced under Configs).

2024-07-09: Updated the ComfyUI workflow in app/api/routes.py generate_image endpoint to use a separate CLIPLoader node for SD 3.5 Large, resolving the issue where the CLIP was not recognized from the checkpoint.

- Excluded sd3.5_large_turbo_all_files/ (comfyUI files) in .gitignore to prevent git commit hangs due to large files.
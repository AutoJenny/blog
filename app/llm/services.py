"""Service for interacting with LLM providers."""

import httpx
import logging
import re
from flask import current_app
from datetime import datetime
from jinja2 import Template
import psycopg2
import psycopg2.extras

logger = logging.getLogger(__name__)
# All ORM model imports removed. Use direct SQL via psycopg2 for any DB access.

def execute_llm_request(request_data):
    """Execute an LLM request with the given parameters."""
    try:
        service = LLMService()
        
        # Log the incoming request
        logger.info(f"Executing LLM request with data: {request_data}")
        
        # Get the prompt and input
        prompt_template = request_data.get('prompt', '').strip()
        input_text = request_data.get('input', '').strip()
        
        # Strip [system] and similar tags from prompt
        cleaned_prompt = re.sub(r'\[.*?\]', '', prompt_template).strip()
        
        # Format the prompt in a clear, explicit way
        prompt = f"""{cleaned_prompt}

Input: {input_text}"""

        logger.debug(f"Using formatted prompt: {prompt}")
        
        # Generate the output
        output = service.generate(
            prompt,
            model_name=request_data['model_name'],
            temperature=request_data.get('temperature', 0.7),
            max_tokens=request_data.get('max_tokens', 2000)
        )
        
        if not output:
            logger.error("LLM service returned empty output")
            return {'error': 'No output generated by the LLM service'}
            
        logger.info(f"Successfully generated output")
        
        # Return in the format expected by the frontend
        return {
            'model_used': request_data['model_name'],
            'response': output
        }
        
    except Exception as e:
        logger.exception(f"Error executing LLM request: {str(e)}")
        return {'error': str(e)}

def assemble_prompt_from_parts(action, fields: dict):
    """
    Assemble a prompt or message list from all prompt parts for an action, ordered.
    For OpenAI: returns a list of {role, content} dicts.
    For Ollama: returns a single concatenated string.
    """
    prompt_parts = (
        LLMActionPromptPart.query.filter_by(action_id=action['id'])
        .order_by(LLMActionPromptPart.order)
        .all()
    )
    messages = []
    for part_link in prompt_parts:
        part = part_link.prompt_part
        # Render with Jinja2
        try:
            content = Template(part.content).render(**fields)
        except Exception as e:
            logger.error(f"Error rendering prompt part {part.id}: {e}")
            content = part.content
        # For OpenAI, use role; for Ollama, just concatenate
        if part.type in ('system', 'user', 'assistant'):
            messages.append({'role': part.type, 'content': content})
        else:
            # For style/instructions/other, treat as user message
            messages.append({'role': 'user', 'content': content})
    # For Ollama, concatenate all content
    ollama_prompt = '\n\n'.join([m['content'] for m in messages])
    return {'openai': messages, 'ollama': ollama_prompt}

class LLMService:
    """Service for interacting with LLM providers."""

    def __init__(self):
        """Initialize the LLM service."""
        self.config = None  # provider type (e.g., 'ollama', 'openai')
        self.api_url = None  # provider API URL

    def generate(self, prompt, model_name=None, temperature=0.7, max_tokens=1000):
        """Generate text using configured LLM, supporting both OpenAI (messages) and Ollama (string)."""
        if not model_name:
            model_name = self.config
        logger.info(f"Generating with model: {model_name}, temperature: {temperature}, max_tokens: {max_tokens}")
        if self.config == "ollama":
            return self._generate_ollama(prompt, model_name, temperature, max_tokens)
        elif self.config == "openai":
            return self._generate_openai(prompt, model_name, temperature, max_tokens)
        else:
            raise ValueError(f"Unsupported provider type: {self.config}")

    def _generate_ollama(self, prompt, model_name, temperature=0.7, max_tokens=1000):
        """Generate text using Ollama."""
        try:
            # Format request JSON consistently
            request_data = {
                "model": model_name,
                "prompt": prompt,
                "temperature": float(temperature),  # Ensure temperature is float
                "max_tokens": int(max_tokens),      # Ensure max_tokens is int
                "stream": False  # Ensure we get a complete response
            }
            logger.debug(f"Sending request to Ollama: {request_data}")
            if not self.api_url:
                raise ValueError("Ollama API URL not set on LLMService")
            response = httpx.post(
                f"{self.api_url}/api/generate",
                json=request_data,
                timeout=180.0,
            )
            response.raise_for_status()
            response_data = response.json()
            logger.debug(f"Received response from Ollama: {response_data}")
            # Handle both response formats
            if "response" in response_data:
                return response_data["response"]
            elif isinstance(response_data, dict) and "model_used" in response_data and "response" in response_data:
                return response_data["response"]
            else:
                logger.error(f"Unexpected response format from Ollama: {response_data}")
                raise ValueError("Unexpected response format from Ollama")
        except httpx.TimeoutException:
            logger.error(f"Timeout while generating with Ollama (model: {model_name})")
            raise TimeoutError("Request to Ollama timed out")
        except httpx.HTTPError as e:
            logger.error(f"HTTP error while generating with Ollama: {str(e)}")
            raise
        except Exception as e:
            logger.exception(f"Error generating with Ollama: {str(e)}")
            raise

    def _generate_openai(self, prompt, model_name, temperature=0.7, max_tokens=1000):
        """Generate text using OpenAI (stubbed for testing)."""
        # Return a dummy response for testing if no API key is set
        return "[DUMMY OPENAI RESPONSE]"

    def execute_action(self, action, fields: dict, post_id=None, model_name=None):
        # --- PATCH: Use direct SQL only, no ORM ---
        model = None
        # Use model_name if provided, else resolve from action['llm_model']
        if model_name:
            model = model_name
        elif action['llm_model']:
            model = action['llm_model']
        else:
            raise ValueError(f"LLM model not set on action {action['id']}")
        # DO NOT GUESS PROVIDER TYPE OR API URL. Use self.config and self.api_url as set by the caller.
        # Assemble prompt/messages from modular prompt parts (stubbed for now)
        messages = [{'role': 'user', 'content': fields.get('input', '')}]
        ollama_prompt = fields.get('input', '')
        # Choose input/output fields
        input_field = action.get('input_field') or 'input'
        output_field = action.get('output_field') or 'output'
        # Call LLM (OpenAI or Ollama)
        if self.config == 'openai':
            result = self.generate(messages, model_name=model, temperature=action['temperature'], max_tokens=action['max_tokens'])
        elif self.config == 'ollama':
            result = self.generate(ollama_prompt, model_name=model, temperature=action['temperature'], max_tokens=action['max_tokens'])
        else:
            raise ValueError(f"Unsupported provider type: {self.config}")
        # Map output to output_field
        if isinstance(result, dict) and 'output' in result:
            result = {output_field: result['output'], **{k: v for k, v in result.items() if k != 'output'}}
        elif isinstance(result, str):
            result = {output_field: result}
        def make_json_safe(obj):
            if isinstance(obj, dict):
                return {k: make_json_safe(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [make_json_safe(i) for i in obj]
            return obj
        return make_json_safe(result)

# Remove all ORM model usage below, stub out as needed for migration. 
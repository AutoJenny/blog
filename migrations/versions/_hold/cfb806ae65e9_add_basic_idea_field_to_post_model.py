"""Add basic_idea field to Post model

Revision ID: cfb806ae65e9
Revises: add_header_image_id
Create Date: 2025-04-24 11:27:47.147351

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "cfb806ae65e9"
down_revision = "add_header_image_id"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Create the workflowstage enum type first
    op.execute(
        "CREATE TYPE workflowstage AS ENUM ('CONCEPTUALIZATION', 'DRAFTING', 'EDITING', 'REVIEW', 'PUBLISHING', 'PUBLISHED', 'ARCHIVED')"
    )

    # First remove foreign key constraints that depend on user table
    with op.batch_alter_table("post", schema=None) as batch_op:
        batch_op.drop_constraint("post_author_id_fkey", type_="foreignkey")
        batch_op.drop_column("author_id")

    with op.batch_alter_table("workflow_status_history", schema=None) as batch_op:
        batch_op.drop_constraint(
            "workflow_status_history_user_id_fkey", type_="foreignkey"
        )
        batch_op.drop_column("user_id")

    # Now we can safely drop the user table
    op.drop_table("user")

    # Rest of the migration
    with op.batch_alter_table("category", schema=None) as batch_op:
        batch_op.alter_column(
            "name",
            existing_type=sa.VARCHAR(length=100),
            type_=sa.String(length=50),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "slug",
            existing_type=sa.VARCHAR(length=100),
            type_=sa.String(length=50),
            existing_nullable=False,
        )
        batch_op.drop_constraint("category_parent_id_fkey", type_="foreignkey")
        batch_op.drop_column("parent_id")

    with op.batch_alter_table("image", schema=None) as batch_op:
        batch_op.alter_column(
            "original_filename", existing_type=sa.VARCHAR(length=255), nullable=True
        )
        batch_op.alter_column(
            "path",
            existing_type=sa.VARCHAR(length=500),
            type_=sa.String(length=255),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "alt_text",
            existing_type=sa.VARCHAR(length=500),
            type_=sa.String(length=255),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "image_metadata",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "watermarked_path",
            existing_type=sa.VARCHAR(length=500),
            type_=sa.String(length=255),
            existing_nullable=True,
        )
        batch_op.create_unique_constraint("uq_image_path", ["path"])
        batch_op.drop_constraint("image_post_id_fkey", type_="foreignkey")
        batch_op.drop_column("post_id")

    with op.batch_alter_table("llm_interaction", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "parameters_used", postgresql.JSON(astext_type=sa.Text()), nullable=True
            )
        )
        batch_op.add_column(
            sa.Column(
                "interaction_metadata",
                postgresql.JSON(astext_type=sa.Text()),
                nullable=True,
            )
        )
        batch_op.alter_column("output_text", existing_type=sa.TEXT(), nullable=True)
        batch_op.drop_constraint("llm_interaction_post_id_fkey", type_="foreignkey")
        batch_op.drop_column("model_used")
        batch_op.drop_column("tokens_used")
        batch_op.drop_column("post_id")
        batch_op.drop_column("duration")
        batch_op.drop_column("parameters")

    with op.batch_alter_table("llm_prompt", schema=None) as batch_op:
        batch_op.add_column(sa.Column("prompt_text", sa.Text(), nullable=False))
        batch_op.add_column(sa.Column("system_prompt", sa.Text(), nullable=True))
        batch_op.alter_column(
            "parameters",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.drop_column("prompt_template")

    with op.batch_alter_table("post", schema=None) as batch_op:
        batch_op.add_column(sa.Column("basic_idea", sa.Text(), nullable=True))
        batch_op.alter_column(
            "llm_metadata",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "seo_metadata",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "syndication_status",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.drop_column("clan_com_post_id")
        batch_op.drop_column("description")
        batch_op.drop_column("subtitle")

    with op.batch_alter_table("post_section", schema=None) as batch_op:
        batch_op.alter_column("post_id", existing_type=sa.INTEGER(), nullable=True)
        batch_op.alter_column("content", existing_type=sa.TEXT(), nullable=True)
        batch_op.alter_column(
            "content_type", existing_type=sa.VARCHAR(length=50), nullable=True
        )
        batch_op.alter_column(
            "video_url",
            existing_type=sa.VARCHAR(length=500),
            type_=sa.String(length=255),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "audio_url",
            existing_type=sa.VARCHAR(length=500),
            type_=sa.String(length=255),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "keywords",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "social_media_snippets",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "section_metadata",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.drop_constraint("post_section_image_id_fkey", type_="foreignkey")
        batch_op.drop_constraint("post_section_post_id_fkey", type_="foreignkey")
        batch_op.create_foreign_key(
            "fk_post_section_image_id", "image", ["image_id"], ["id"]
        )
        batch_op.create_foreign_key(
            "fk_post_section_post_id", "post", ["post_id"], ["id"]
        )
        batch_op.drop_column("updated_at")
        batch_op.drop_column("created_at")
        batch_op.drop_column("is_conclusion")

    # Handle workflow_status table changes
    op.execute(
        "ALTER TABLE workflow_status ALTER COLUMN current_stage TYPE workflowstage USING current_stage::text::workflowstage"
    )
    op.execute(
        "ALTER TABLE workflow_status_history ALTER COLUMN from_stage TYPE workflowstage USING from_stage::text::workflowstage"
    )
    op.execute(
        "ALTER TABLE workflow_status_history ALTER COLUMN to_stage TYPE workflowstage USING to_stage::text::workflowstage"
    )

    with op.batch_alter_table("workflow_status", schema=None) as batch_op:
        batch_op.alter_column("post_id", existing_type=sa.INTEGER(), nullable=True)
        batch_op.alter_column(
            "current_stage",
            existing_type=sa.VARCHAR(length=11),
            type_=sa.Enum(
                "CONCEPTUALIZATION",
                "DRAFTING",
                "EDITING",
                "REVIEW",
                "PUBLISHING",
                "PUBLISHED",
                "ARCHIVED",
                name="workflowstage",
            ),
            nullable=True,
        )
        batch_op.alter_column(
            "stage_data",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=postgresql.JSON(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.create_unique_constraint("uq_workflow_status_post_id", ["post_id"])

    with op.batch_alter_table("workflow_status_history", schema=None) as batch_op:
        batch_op.alter_column(
            "workflow_status_id", existing_type=sa.INTEGER(), nullable=True
        )
        batch_op.alter_column(
            "from_stage",
            existing_type=sa.VARCHAR(length=11),
            type_=sa.Enum(
                "CONCEPTUALIZATION",
                "DRAFTING",
                "EDITING",
                "REVIEW",
                "PUBLISHING",
                "PUBLISHED",
                "ARCHIVED",
                name="workflowstage",
            ),
            nullable=True,
        )
        batch_op.alter_column(
            "to_stage",
            existing_type=sa.VARCHAR(length=11),
            type_=sa.Enum(
                "CONCEPTUALIZATION",
                "DRAFTING",
                "EDITING",
                "REVIEW",
                "PUBLISHING",
                "PUBLISHED",
                "ARCHIVED",
                name="workflowstage",
            ),
            nullable=True,
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("workflow_status_history", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False)
        )
        batch_op.create_foreign_key(
            "workflow_status_history_user_id_fkey", "user", ["user_id"], ["id"]
        )
        batch_op.alter_column(
            "to_stage",
            existing_type=sa.Enum(
                "CONCEPTUALIZATION",
                "DRAFTING",
                "EDITING",
                "REVIEW",
                "PUBLISHING",
                "PUBLISHED",
                "ARCHIVED",
                name="workflowstage",
            ),
            type_=sa.VARCHAR(length=11),
            nullable=False,
        )
        batch_op.alter_column(
            "from_stage",
            existing_type=sa.Enum(
                "CONCEPTUALIZATION",
                "DRAFTING",
                "EDITING",
                "REVIEW",
                "PUBLISHING",
                "PUBLISHED",
                "ARCHIVED",
                name="workflowstage",
            ),
            type_=sa.VARCHAR(length=11),
            nullable=False,
        )
        batch_op.alter_column(
            "workflow_status_id", existing_type=sa.INTEGER(), nullable=False
        )

    with op.batch_alter_table("workflow_status", schema=None) as batch_op:
        batch_op.drop_constraint("uq_workflow_status_post_id", type_="unique")
        batch_op.alter_column(
            "stage_data",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "current_stage",
            existing_type=sa.Enum(
                "CONCEPTUALIZATION",
                "DRAFTING",
                "EDITING",
                "REVIEW",
                "PUBLISHING",
                "PUBLISHED",
                "ARCHIVED",
                name="workflowstage",
            ),
            type_=sa.VARCHAR(length=11),
            nullable=False,
        )
        batch_op.alter_column("post_id", existing_type=sa.INTEGER(), nullable=False)

    with op.batch_alter_table("post_section", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "is_conclusion", sa.BOOLEAN(), autoincrement=False, nullable=False
            )
        )
        batch_op.add_column(
            sa.Column(
                "created_at",
                postgresql.TIMESTAMP(),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column(
                "updated_at",
                postgresql.TIMESTAMP(),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.drop_constraint("fk_post_section_image_id", type_="foreignkey")
        batch_op.drop_constraint("fk_post_section_post_id", type_="foreignkey")
        batch_op.create_foreign_key(
            "post_section_post_id_fkey", "post", ["post_id"], ["id"], ondelete="CASCADE"
        )
        batch_op.create_foreign_key(
            "post_section_image_id_fkey",
            "image",
            ["image_id"],
            ["id"],
            ondelete="SET NULL",
        )
        batch_op.alter_column(
            "section_metadata",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "social_media_snippets",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "keywords",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "audio_url",
            existing_type=sa.String(length=255),
            type_=sa.VARCHAR(length=500),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "video_url",
            existing_type=sa.String(length=255),
            type_=sa.VARCHAR(length=500),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "content_type", existing_type=sa.VARCHAR(length=50), nullable=False
        )
        batch_op.alter_column("content", existing_type=sa.TEXT(), nullable=False)
        batch_op.alter_column("post_id", existing_type=sa.INTEGER(), nullable=False)

    with op.batch_alter_table("post", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "subtitle", sa.VARCHAR(length=200), autoincrement=False, nullable=True
            )
        )
        batch_op.add_column(
            sa.Column("author_id", sa.INTEGER(), autoincrement=False, nullable=False)
        )
        batch_op.add_column(
            sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True)
        )
        batch_op.add_column(
            sa.Column(
                "clan_com_post_id",
                sa.VARCHAR(length=100),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.create_foreign_key(
            "post_author_id_fkey", "user", ["author_id"], ["id"]
        )
        batch_op.alter_column(
            "syndication_status",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "seo_metadata",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "llm_metadata",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.drop_column("basic_idea")

    with op.batch_alter_table("llm_prompt", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("prompt_template", sa.TEXT(), autoincrement=False, nullable=False)
        )
        batch_op.alter_column(
            "parameters",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.drop_column("system_prompt")
        batch_op.drop_column("prompt_text")

    with op.batch_alter_table("llm_interaction", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "parameters",
                postgresql.JSONB(astext_type=sa.Text()),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "duration",
                sa.DOUBLE_PRECISION(precision=53),
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column("post_id", sa.INTEGER(), autoincrement=False, nullable=True)
        )
        batch_op.add_column(
            sa.Column("tokens_used", sa.INTEGER(), autoincrement=False, nullable=True)
        )
        batch_op.add_column(
            sa.Column(
                "model_used", sa.VARCHAR(length=50), autoincrement=False, nullable=False
            )
        )
        batch_op.create_foreign_key(
            "llm_interaction_post_id_fkey", "post", ["post_id"], ["id"]
        )
        batch_op.alter_column("output_text", existing_type=sa.TEXT(), nullable=False)
        batch_op.drop_column("interaction_metadata")
        batch_op.drop_column("parameters_used")

    with op.batch_alter_table("image", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("post_id", sa.INTEGER(), autoincrement=False, nullable=True)
        )
        batch_op.create_foreign_key(
            "image_post_id_fkey", "post", ["post_id"], ["id"], ondelete="CASCADE"
        )
        batch_op.drop_constraint("uq_image_path", type_="unique")
        batch_op.alter_column(
            "watermarked_path",
            existing_type=sa.String(length=255),
            type_=sa.VARCHAR(length=500),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "image_metadata",
            existing_type=postgresql.JSON(astext_type=sa.Text()),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "alt_text",
            existing_type=sa.String(length=255),
            type_=sa.VARCHAR(length=500),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "path",
            existing_type=sa.String(length=255),
            type_=sa.VARCHAR(length=500),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "original_filename", existing_type=sa.VARCHAR(length=255), nullable=False
        )

    with op.batch_alter_table("category", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("parent_id", sa.INTEGER(), autoincrement=False, nullable=True)
        )
        batch_op.create_foreign_key(
            "category_parent_id_fkey", "category", ["parent_id"], ["id"]
        )
        batch_op.alter_column(
            "slug",
            existing_type=sa.String(length=50),
            type_=sa.VARCHAR(length=100),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "name",
            existing_type=sa.String(length=50),
            type_=sa.VARCHAR(length=100),
            existing_nullable=False,
        )

    op.create_table(
        "user",
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "username", sa.VARCHAR(length=64), autoincrement=False, nullable=False
        ),
        sa.Column("email", sa.VARCHAR(length=120), autoincrement=False, nullable=False),
        sa.Column(
            "password_hash", sa.VARCHAR(length=128), autoincrement=False, nullable=True
        ),
        sa.Column("is_admin", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
        sa.UniqueConstraint("email", name="user_email_key"),
        sa.UniqueConstraint("username", name="user_username_key"),
    )
    # ### end Alembic commands ###

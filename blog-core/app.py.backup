from flask import Flask, render_template, jsonify

app = Flask(__name__)

@app.route('/')
def test_page():
    """Main page showing the microservice mockup demo."""
    return mockup_demo()

@app.route('/test-simple')
def test_simple():
    """Simple test route to check if Flask is working."""
    return jsonify({'message': 'Flask is working', 'status': 'ok'})

@app.route('/mockup-demo')
def mockup_demo():
    """Workflow navigation mockup page demonstrating microservice architecture."""
    return """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Microservice Workflow Demo</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    margin: 0; 
                    padding: 0; 
                    background: #f5f5f5; 
                }
                .header { 
                    background: linear-gradient(90deg, #181c2a 0%, #23273a 100%); 
                    color: white; 
                    padding: 20px; 
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .header h1 { margin: 0; font-size: 24px; }
                .header p { margin: 5px 0 0 0; opacity: 0.8; }
                
                .nav-container { 
                    background: white; 
                    border-bottom: 1px solid #e0e0e0; 
                    padding: 15px 20px;
                }
                .workflow-nav { 
                    display: flex; 
                    gap: 20px; 
                    align-items: center;
                    flex-wrap: wrap;
                }
                .stage-group { 
                    display: flex; 
                    gap: 10px; 
                    align-items: center;
                    flex-wrap: wrap;
                }
                .stage { 
                    background: #f8f9fa; 
                    border: 1px solid #dee2e6; 
                    border-radius: 6px; 
                    padding: 8px 12px; 
                    font-size: 14px; 
                    cursor: pointer;
                    transition: all 0.2s;
                }
                .stage:hover { 
                    background: #e9ecef; 
                    border-color: #adb5bd;
                }
                .stage.active { 
                    background: #007bff; 
                    color: white; 
                    border-color: #0056b3;
                }
                .substage { 
                    background: #f8f9fa; 
                    border: 1px solid #dee2e6; 
                    border-radius: 4px; 
                    padding: 6px 10px; 
                    font-size: 12px; 
                    cursor: pointer;
                    transition: all 0.2s;
                }
                .substage:hover { 
                    background: #e9ecef; 
                    border-color: #adb5bd;
                }
                .substage.active { 
                    background: #28a745; 
                    color: white; 
                    border-color: #1e7e34;
                }
                .step { 
                    background: #f8f9fa; 
                    border: 1px solid #dee2e6; 
                    border-radius: 3px; 
                    padding: 4px 8px; 
                    font-size: 11px; 
                    cursor: pointer;
                    transition: all 0.2s;
                }
                .step:hover { 
                    background: #e9ecef; 
                    border-color: #adb5bd;
                }
                .step.active { 
                    background: #ffc107; 
                    color: #212529; 
                    border-color: #e0a800;
                }
                
                .content { 
                    padding: 30px; 
                    max-width: 1200px; 
                    margin: 0 auto;
                }
                .content h2 { 
                    color: #333; 
                    margin-bottom: 20px;
                }
                .content p { 
                    color: #666; 
                    line-height: 1.6;
                }
                .workflow-content {
                    background: white;
                    border: 1px solid #e0e0e0;
                    border-radius: 8px;
                    padding: 30px;
                    margin-top: 20px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                    min-height: 400px;
                }
                .status-bar {
                    background: #e9ecef;
                    border: 1px solid #dee2e6;
                    border-radius: 4px;
                    padding: 10px 15px;
                    margin-bottom: 20px;
                    font-size: 14px;
                }
                .status-bar.success {
                    background: #d4edda;
                    border-color: #c3e6cb;
                    color: #155724;
                }
                .status-bar.error {
                    background: #f8d7da;
                    border-color: #f5c6cb;
                    color: #721c24;
                }
                .status-bar.info {
                    background: #d1ecf1;
                    border-color: #bee5eb;
                    color: #0c5460;
                }
                .demo-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin-top: 20px;
                }
                .demo-card {
                    background: white;
                    border: 1px solid #e0e0e0;
                    border-radius: 8px;
                    padding: 20px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                }
                .demo-card h3 {
                    margin: 0 0 10px 0;
                    color: #333;
                }
                .demo-card p {
                    margin: 0;
                    color: #666;
                }
                .btn {
                    background: #007bff;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 14px;
                    margin: 5px;
                }
                .btn:hover {
                    background: #0056b3;
                }
                .btn.secondary {
                    background: #6c757d;
                }
                .btn.secondary:hover {
                    background: #545b62;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Blog Core System (Port 5000)</h1>
                <p>Content Management & Publishing Platform - Microservice Demo</p>
            </div>
            
            <div class="nav-container">
                <div class="workflow-nav">
                    <div class="stage-group">
                        <div class="stage active" onclick="loadWorkflowStage('planning', 'idea', 'initial_concept')">üìã Planning</div>
                        <div class="substage active" onclick="loadWorkflowStage('planning', 'idea', 'initial_concept')">üí° Idea</div>
                        <div class="step active" onclick="loadWorkflowStage('planning', 'idea', 'initial_concept')">Initial Concept</div>
                    </div>
                    
                    <div class="stage-group">
                        <div class="stage" onclick="loadWorkflowStage('writing', 'content', 'draft_creation')">‚úçÔ∏è Writing</div>
                        <div class="substage" onclick="loadWorkflowStage('writing', 'content', 'draft_creation')">üìù Content</div>
                        <div class="step" onclick="loadWorkflowStage('writing', 'content', 'draft_creation')">Draft Creation</div>
                    </div>
                    
                    <div class="stage-group">
                        <div class="stage" onclick="loadWorkflowStage('structuring', 'layout', 'format_setup')">üèóÔ∏è Structuring</div>
                        <div class="substage" onclick="loadWorkflowStage('structuring', 'layout', 'format_setup')">üìê Layout</div>
                        <div class="step" onclick="loadWorkflowStage('structuring', 'layout', 'format_setup')">Format Setup</div>
                    </div>
                    
                    <div class="stage-group">
                        <div class="stage" onclick="loadWorkflowStage('images', 'creation', 'generate_images')">üñºÔ∏è Images</div>
                        <div class="substage" onclick="loadWorkflowStage('images', 'creation', 'generate_images')">üé® Creation</div>
                        <div class="step" onclick="loadWorkflowStage('images', 'creation', 'generate_images')">Generate Images</div>
                    </div>
                    
                    <div class="stage-group">
                        <div class="stage" onclick="loadWorkflowStage('publishing', 'preflight', 'final_review')">üöÄ Publishing</div>
                        <div class="substage" onclick="loadWorkflowStage('publishing', 'preflight', 'final_review')">‚úÖ Preflight</div>
                        <div class="step" onclick="loadWorkflowStage('publishing', 'preflight', 'final_review')">Final Review</div>
                    </div>
                </div>
            </div>
            
            <div class="content">
                <h2>Microservice Workflow Demo</h2>
                <p>This demonstrates the actual microservice architecture with blog-core (port 5000) and blog-workflow (port 5001) communicating in real-time.</p>
                
                <div class="status-bar info" id="status">
                    Ready to load workflow content from blog-workflow service (port 5001)
                </div>
                
                <div class="workflow-content" id="workflow-content">
                    <h3>Workflow Content Area</h3>
                    <p>Click any stage, substage, or step above to load content from the blog-workflow service.</p>
                    <p><strong>Current Architecture:</strong></p>
                    <ul>
                        <li><strong>Blog Core (Port 5000):</strong> Main site with header and navigation</li>
                        <li><strong>Blog Workflow (Port 5001):</strong> Workflow stages and functionality</li>
                        <li><strong>Communication:</strong> AJAX calls between services</li>
                    </ul>
                </div>
                
                <div class="demo-grid">
                    <div class="demo-card">
                        <h3>Service Status</h3>
                        <p>Check if both services are running:</p>
                        <button class="btn" onclick="checkServices()">Check Services</button>
                        <button class="btn secondary" onclick="loadWorkflowHome()">Load Workflow Home</button>
                    </div>
                    <div class="demo-card">
                        <h3>Current Stage</h3>
                        <p id="current-stage">Planning ‚Üí Idea ‚Üí Initial Concept</p>
                        <p><small>Click navigation elements to change stages</small></p>
                    </div>
                    <div class="demo-card">
                        <h3>Microservice Benefits</h3>
                        <p>‚Ä¢ Independent development and deployment</p>
                        <p>‚Ä¢ Scalable architecture</p>
                        <p>‚Ä¢ Unified user experience</p>
                    </div>
                </div>
            </div>
            
            <script>
                let currentStage = 'planning';
                let currentSubstage = 'idea';
                let currentStep = 'initial_concept';
                
                function updateStatus(message, type = 'info') {
                    const status = document.getElementById('status');
                    status.textContent = message;
                    status.className = 'status-bar ' + type;
                }
                
                function updateCurrentStage() {
                    const stageElement = document.getElementById('current-stage');
                    stageElement.textContent = `${currentStage.charAt(0).toUpperCase() + currentStage.slice(1)} ‚Üí ${currentSubstage.charAt(0).toUpperCase() + currentSubstage.slice(1)} ‚Üí ${currentStep.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}`;
                }
                
                function updateActiveNavigation(stage, substage, step) {
                    // Remove all active classes
                    document.querySelectorAll('.stage, .substage, .step').forEach(el => {
                        el.classList.remove('active');
                    });
                    
                    // Add active class to current elements
                    const stageElements = document.querySelectorAll('.stage');
                    const substageElements = document.querySelectorAll('.substage');
                    const stepElements = document.querySelectorAll('.step');
                    
                    // Find and activate the correct elements (simplified logic)
                    if (stageElements.length > 0) stageElements[0].classList.add('active');
                    if (substageElements.length > 0) substageElements[0].classList.add('active');
                    if (stepElements.length > 0) stepElements[0].classList.add('active');
                }
                
                async function loadWorkflowStage(stage, substage, step) {
                    currentStage = stage;
                    currentSubstage = substage;
                    currentStep = step;
                    
                    updateStatus('Loading workflow content from blog-workflow service...', 'info');
                    updateCurrentStage();
                    updateActiveNavigation(stage, substage, step);
                    
                    try {
                        // Try to load from blog-workflow service
                        const response = await fetch(`http://localhost:5001/workflow/posts/53/${stage}/${substage}?step=${step}`, {
                            method: 'GET',
                            headers: {
                                'Accept': 'text/html',
                            }
                        });
                        
                        if (response.ok) {
                            const content = await response.text();
                            document.getElementById('workflow-content').innerHTML = content;
                            updateStatus(`Successfully loaded ${stage}/${substage}/${step} from blog-workflow service`, 'success');
                        } else {
                            throw new Error(`HTTP ${response.status}`);
                        }
                    } catch (error) {
                        console.error('Error loading workflow content:', error);
                        document.getElementById('workflow-content').innerHTML = `
                            <h3>Workflow Stage: ${stage.charAt(0).toUpperCase() + stage.slice(1)}</h3>
                            <h4>Substage: ${substage.charAt(0).toUpperCase() + substage.slice(1)}</h4>
                            <h5>Step: ${step.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</h5>
                            <p>This content would be loaded from the blog-workflow service (port 5001).</p>
                            <p><strong>Error:</strong> ${error.message}</p>
                            <p><strong>Expected URL:</strong> http://localhost:5001/workflow/posts/53/${stage}/${substage}?step=${step}</p>
                        `;
                        updateStatus(`Error loading content: ${error.message}`, 'error');
                    }
                }
                
                async function checkServices() {
                    updateStatus('Checking service status...', 'info');
                    
                    try {
                        // Check blog-core (current service)
                        const coreResponse = await fetch('/test-simple');
                        const coreStatus = coreResponse.ok ? '‚úÖ Running' : '‚ùå Error';
                        
                        // Check blog-workflow
                        const workflowResponse = await fetch('http://localhost:5001/health');
                        const workflowStatus = workflowResponse.ok ? '‚úÖ Running' : '‚ùå Error';
                        
                        updateStatus(`Blog Core (5000): ${coreStatus} | Blog Workflow (5001): ${workflowStatus}`, 'success');
                    } catch (error) {
                        updateStatus(`Service check failed: ${error.message}`, 'error');
                    }
                }
                
                async function loadWorkflowHome() {
                    try {
                        const response = await fetch('http://localhost:5001/workflow/');
                        if (response.ok) {
                            const content = await response.text();
                            document.getElementById('workflow-content').innerHTML = content;
                            updateStatus('Loaded workflow home page from blog-workflow service', 'success');
                        } else {
                            throw new Error(`HTTP ${response.status}`);
                        }
                    } catch (error) {
                        updateStatus(`Error loading workflow home: ${error.message}`, 'error');
                    }
                }
                
                // Initialize
                updateCurrentStage();
            </script>
        </body>
        </html>
        """

@app.route('/health')
def health():
    return {'status': 'healthy'}

if __name__ == '__main__':
    import os
    port = int(os.getenv('PORT', 5000))
    app.run(debug=True, host='0.0.0.0', port=port) 
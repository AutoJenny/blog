{% extends 'base.html' %}

{% block title %}Format Templates{% endblock %}

{% block content %}
<div class="admin-container">
    <div class="admin-header">
        <h1 class="admin-title">Format Templates</h1>
        <button type="button" class="btn btn-primary" id="newFormatBtn">
            <i class="fas fa-plus"></i> New Format
        </button>
    </div>

    <div class="admin-content">
        <!-- Format Templates List -->
        <div class="admin-card mb-6">
            <div class="admin-card-header">
                <h2 class="admin-card-title">Available Templates</h2>
            </div>
            <div class="admin-card-body">
                <div id="formatTemplatesList" class="grid gap-4">
                    {% if templates %}
                    {% for template in templates %}
                    <div class="format-card" data-id="{{ template.id }}">
                        <div class="format-card-header">
                            <div>
                                <h3 class="format-card-title">{{ template.name }}</h3>
                                {% if template.description %}
                                <p class="text-sm text-gray-400 mt-1">{{ template.description }}</p>
                                {% endif %}
                            </div>
                            <span class="format-card-type">{{ template.format_type }}</span>
                        </div>

                        <!-- Format Fields Preview -->
                        <div class="format-fields-preview mt-3">
                            <h4 class="text-sm font-medium text-gray-300 mb-2">Fields ({{ template.fields|length }}):
                            </h4>
                            <div class="fields-list">
                                {% if template.fields %}
                                {% for field in template.fields %}
                                <div class="field-item">
                                    <span class="field-name">{{ field.name }}</span>
                                    <span class="field-type">{{ field.type }}</span>
                                    {% if field.required %}
                                    <span class="field-required">Required</span>
                                    {% endif %}
                                    {% if field.description %}
                                    <span class="field-description">{{ field.description }}</span>
                                    {% endif %}
                                </div>
                                {% endfor %}
                                {% else %}
                                <p class="text-sm text-gray-500">No fields defined</p>
                                {% endif %}
                            </div>
                        </div>

                        <div class="format-card-actions mt-4">
                            <button class="btn btn-secondary btn-sm view-details" data-id="{{ template.id }}">
                                <i class="fas fa-eye"></i> View Details
                            </button>
                            <button class="btn btn-secondary btn-sm edit-format" data-id="{{ template.id }}">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-danger btn-sm delete-format" data-id="{{ template.id }}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    {% endfor %}
                    {% else %}
                    <div class="text-center py-8">
                        <p class="text-gray-400">No format templates found. Create your first template to get started.
                        </p>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Format Template Modal -->
<div id="formatModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title" id="modalTitle">New Format Template</h2>
            <button type="button" class="modal-close" id="modalCloseBtn">&times;</button>
        </div>
        <form id="formatForm">
            <input type="hidden" id="formatId" name="id">

            <div class="form-group">
                <label class="form-label" for="formatName">Template Name</label>
                <input type="text" id="formatName" name="name" class="form-input" required>
            </div>

            <div class="form-group">
                <label class="form-label" for="formatDescription">Description</label>
                <textarea id="formatDescription" name="description" class="form-textarea" rows="3"></textarea>
            </div>

            <div class="form-group">
                <label class="form-label" for="formatType">Format Type</label>
                <select id="formatType" name="format_type" class="form-select" required>
                    <option value="">Select Format Type...</option>
                    <option value="input">Input Format</option>
                    <option value="output">Output Format</option>
                    <option value="bidirectional">Bidirectional Format</option>
                </select>
            </div>

            <div class="form-group">
                <label class="form-label" for="formatFields">Format Fields (JSON)</label>
                <div class="format-editor">
                    <textarea id="formatFields" name="fields" class="form-textarea" required
                        placeholder='[{"name": "title", "type": "string", "required": true, "description": "The title"}]'></textarea>
                </div>
                <p class="admin-help-text">
                    Define the format fields using JSON. Each field should have: name, type, required, and description.
                </p>
            </div>

            <div class="form-group">
                <label class="form-label">Format Preview</label>
                <div id="formatPreview" class="format-preview">
                    <div class="preview-content">
                        <pre><code id="previewCode">Select a format to preview...</code></pre>
                    </div>
                    <div class="preview-validation">
                        <div id="validationStatus" class="validation-status">
                            <!-- Validation status will be shown here -->
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex justify-end gap-4">
                <button type="button" class="btn btn-secondary" id="testFormatBtn">Test Format</button>
                <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Format</button>
            </div>
        </form>
    </div>
</div>

<!-- Format Details Modal -->
<div id="detailsModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Format Template Details</h2>
            <button type="button" class="modal-close" id="detailsModalCloseBtn">&times;</button>
        </div>
        <div id="detailsContent" class="modal-body">
            <!-- Details will be loaded here -->
        </div>
    </div>
</div>

<!-- Test Format Modal -->
<div id="testModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Test Format</h2>
            <button type="button" class="modal-close" id="testModalCloseBtn">&times;</button>
        </div>
        <form id="testForm">
            <div class="form-group">
                <label class="form-label" for="testInput">Test Data (JSON)</label>
                <textarea id="testInput" class="form-textarea" required
                    placeholder="Enter test data in JSON format..."></textarea>
            </div>

            <div class="form-group">
                <label class="form-label">Validation Result</label>
                <div id="testResult" class="test-result">
                    <!-- Test results will be shown here -->
                </div>
            </div>

            <div class="flex justify-end gap-4">
                <button type="button" class="btn btn-secondary" id="closeTestBtn">Close</button>
                <button type="submit" class="btn btn-primary">Validate</button>
            </div>
        </form>
    </div>
</div>

<style>
    .format-editor {
        position: relative;
    }

    .form-textarea {
        min-height: 200px;
        font-family: 'Monaco', 'Menlo', monospace;
        line-height: 1.6;
        resize: vertical;
    }

    .format-preview {
        background: var(--admin-bg-card);
        border: 1px solid var(--admin-border);
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .preview-content {
        padding: 1rem;
        max-height: 300px;
        overflow-y: auto;
    }

    .preview-content pre {
        margin: 0;
        white-space: pre-wrap;
    }

    .preview-validation {
        border-top: 1px solid var(--admin-border);
        padding: 0.5rem 1rem;
        background: var(--admin-bg-row-odd);
    }

    .validation-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        min-height: 1.5rem;
    }

    .validation-status.valid {
        color: var(--admin-success);
    }

    .validation-status.invalid {
        color: var(--admin-error);
    }

    .test-result {
        background: var(--admin-bg-card);
        border: 1px solid var(--admin-border);
        border-radius: 0.5rem;
        padding: 1rem;
        min-height: 100px;
        max-height: 200px;
        overflow-y: auto;
    }

    .test-result.valid {
        border-color: var(--admin-success);
    }

    .test-result.invalid {
        border-color: var(--admin-error);
    }

    #formatTemplatesList .format-card {
        background: var(--admin-bg-card);
        border: 1px solid var(--admin-border);
        border-radius: 0.5rem;
        padding: 1rem;
    }

    #formatTemplatesList .format-card:hover {
        border-color: var(--admin-accent);
    }

    .format-card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.5rem;
    }

    .format-card-title {
        font-weight: 600;
        color: var(--admin-text);
    }

    .format-card-type {
        font-size: 0.875rem;
        color: var(--admin-text-secondary);
        padding: 0.25rem 0.5rem;
        background: var(--admin-bg-row-odd);
        border-radius: 0.25rem;
        white-space: nowrap;
    }

    .format-card-actions {
        display: flex;
        gap: 0.5rem;
    }

    .format-fields-preview {
        background: var(--admin-bg-row-odd);
        border-radius: 0.25rem;
        padding: 0.75rem;
    }

    .fields-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .field-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: var(--admin-bg-card);
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
    }

    .field-name {
        font-weight: 500;
        color: var(--admin-text);
    }

    .field-type {
        color: var(--admin-accent);
        font-size: 0.75rem;
        padding: 0.125rem 0.25rem;
        background: var(--admin-bg-row-odd);
        border-radius: 0.125rem;
    }

    .field-required {
        color: var(--admin-error);
        font-size: 0.75rem;
        font-weight: 500;
    }

    .field-description {
        color: var(--admin-text-secondary);
        font-size: 0.75rem;
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: #1e293b;
            border: 1px solid #475569;
            border-radius: 0.5rem;
            padding: 0;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #475569;
            background-color: #334155;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #e2e8f0;
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #94a3b8;
            cursor: pointer;
            padding: 0;
            width: 2rem;
            height: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.25rem;
        }

        .modal-close:hover {
            background-color: #475569;
            color: #e2e8f0;
        }

        .modal-body {
            padding: 1rem;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            font-weight: 500;
            color: #e2e8f0;
            margin-bottom: 0.5rem;
        }

        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #475569;
            border-radius: 0.375rem;
            background-color: #1e293b;
            color: #e2e8f0;
            font-size: 0.875rem;
        }

        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 1px #3b82f6;
        }

        /* Button Styles */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background-color: #2563eb;
        }

        .btn-secondary {
            background-color: #475569;
            color: #e2e8f0;
        }

        .btn-secondary:hover {
            background-color: #64748b;
        }

        .btn-danger {
            background-color: #dc2626;
            color: white;
        }

        .btn-danger:hover {
            background-color: #b91c1c;
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
        }

        white-space: nowrap;
    }
</style>

<script>
    // Format template management
    let currentFormatId = null;

    // Show format modal
    function showFormatModal(isNew = true) {
        const modal = document.getElementById('formatModal');
        const form = document.getElementById('formatForm');
        const title = document.getElementById('modalTitle');

        title.textContent = isNew ? 'New Format Template' : 'Edit Format Template';
        if (isNew) {
            form.reset();
            document.getElementById('formatId').value = '';
            currentFormatId = null;
        }

        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    // View format details
    async function viewFormatDetails(id) {
        try {
            const response = await fetch(`/api/workflow/formats/templates/${id}`);
            const format = await response.json();

            const detailsContent = document.getElementById('detailsContent');
            detailsContent.innerHTML = `
                <div class="space-y-4">
                    <div>
                        <h3 class="text-lg font-semibold">${format.name}</h3>
                        <p class="text-sm text-gray-400">${format.description || 'No description'}</p>
                    </div>
                    
                    <div>
                        <h4 class="font-medium mb-2">Format Type</h4>
                        <span class="inline-block px-2 py-1 bg-gray-700 rounded text-sm">${format.format_type}</span>
                    </div>
                    
                    <div>
                        <h4 class="font-medium mb-2">Fields (${format.fields.length})</h4>
                        <div class="space-y-2">
                            ${format.fields.map(field => `
                                <div class="bg-gray-800 p-3 rounded">
                                    <div class="flex items-center gap-2 mb-1">
                                        <span class="font-medium">${field.name}</span>
                                        <span class="text-xs px-2 py-1 bg-blue-600 rounded">${field.type}</span>
                                        ${field.required ? '<span class="text-xs px-2 py-1 bg-red-600 rounded">Required</span>' : ''}
                                    </div>
                                    ${field.description ? `<p class="text-sm text-gray-400">${field.description}</p>` : ''}
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="font-medium mb-2">Raw JSON</h4>
                        <pre class="bg-gray-800 p-3 rounded overflow-x-auto text-sm"><code>${JSON.stringify(format, null, 2)}</code></pre>
                    </div>
                </div>
            `;

            document.getElementById('detailsModal').classList.add('active');
            document.body.style.overflow = 'hidden';
        } catch (error) {
            alert('Failed to load format details');
        }
    }

    // Edit format
    async function editFormat(id) {
        try {
            const response = await fetch(`/api/workflow/formats/templates/${id}`);
            const format = await response.json();

            document.getElementById('formatId').value = format.id;
            document.getElementById('formatName').value = format.name;
            document.getElementById('formatDescription').value = format.description || '';
            document.getElementById('formatType').value = format.format_type;
            document.getElementById('formatFields').value = JSON.stringify(format.fields, null, 2);

            currentFormatId = id;
            showFormatModal(false);
            updatePreview();
        } catch (error) {
            alert('Failed to load format template');
        }
    }

    // Delete format
    async function deleteFormat(id) {
        if (!confirm('Are you sure you want to delete this format template?')) return;

        try {
            await fetch(`/api/workflow/formats/templates/${id}`, { method: 'DELETE' });
            location.reload(); // Reload to show updated list
        } catch (error) {
            alert('Failed to delete format template');
        }
    }

    // Update preview
    function updatePreview() {
        const fieldsText = document.getElementById('formatFields').value;
        const previewCode = document.getElementById('previewCode');

        try {
            const fields = JSON.parse(fieldsText);
            previewCode.textContent = JSON.stringify(fields, null, 2);
            document.getElementById('validationStatus').innerHTML = '<span class="valid">✓ Valid JSON</span>';
        } catch (error) {
            previewCode.textContent = 'Invalid JSON';
            document.getElementById('validationStatus').innerHTML = '<span class="invalid">✗ Invalid JSON</span>';
        }
    }

    // Validate test data
    async function validateTestData(event) {
        event.preventDefault();
        const testInput = document.getElementById('testInput').value;
        const testResult = document.getElementById('testResult');

        try {
            const testData = JSON.parse(testInput);
            const response = await fetch('/api/workflow/formats/validate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fields: currentFormatFields,
                    test_data: testData
                })
            });

            const result = await response.json();
            testResult.innerHTML = result.valid
                ? '<span class="valid">✓ Valid data</span>'
                : `<span class="invalid">✗ Invalid data: ${result.error}</span>`;
            testResult.className = `test-result ${result.valid ? 'valid' : 'invalid'}`;
        } catch (error) {
            testResult.innerHTML = '<span class="invalid">✗ Invalid JSON</span>';
            testResult.className = 'test-result invalid';
        }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('newFormatBtn').addEventListener('click', () => showFormatModal(true));

        document.querySelectorAll('.view-details').forEach(btn => {
            btn.addEventListener('click', () => viewFormatDetails(btn.dataset.id));
        });

        document.querySelectorAll('.edit-format').forEach(btn => {
            btn.addEventListener('click', () => editFormat(btn.dataset.id));
        });

        document.querySelectorAll('.delete-format').forEach(btn => {
            btn.addEventListener('click', () => deleteFormat(btn.dataset.id));
        });

        document.getElementById('formatFields').addEventListener('input', updatePreview);
        document.getElementById('formatType').addEventListener('change', updatePreview);

        document.getElementById('formatForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = {
                name: formData.get('name'),
                description: formData.get('description'),
                format_type: formData.get('format_type'),
                fields: JSON.parse(formData.get('fields'))
            };

            try {
                const method = currentFormatId ? 'PUT' : 'POST';
                const url = currentFormatId
                    ? `/api/workflow/formats/templates/${currentFormatId}`
                    : '/api/workflow/formats/templates';

                await fetch(url, {
                    method,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                document.getElementById('formatModal').classList.remove('active');
                document.body.style.overflow = '';
                location.reload(); // Reload to show updated list
            } catch (error) {
                alert('Failed to save format template');
            }
        });

        document.getElementById('testForm').addEventListener('submit', validateTestData);
        document.getElementById('cancelBtn').addEventListener('click', () => {
            document.getElementById('formatModal').classList.remove('active');
            document.body.style.overflow = '';
        });
        document.getElementById('closeTestBtn').addEventListener('click', () => {
            document.getElementById('testModal').classList.remove('active');
        });
        document.getElementById('modalCloseBtn').addEventListener('click', () => {
            document.getElementById('formatModal').classList.remove('active');
            document.body.style.overflow = '';
        });
        document.getElementById('detailsModalCloseBtn').addEventListener('click', () => {
            document.getElementById('detailsModal').classList.remove('active');
            document.body.style.overflow = '';
        });
        document.getElementById('testModalCloseBtn').addEventListener('click', () => {
        });
    });
    document.getElementById('testModal').classList.remove('active');
    });
</script>
{% endblock %}